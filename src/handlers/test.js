// Socket {
//   _events: [Object: null prototype] { error: [Function: noop] },
//   _eventsCount: 1,
//   _maxListeners: undefined,
//   nsp: <ref *2> Namespace {
//     _events: [Object: null prototype] { connection: [Function (anonymous)] },
//     _eventsCount: 1,
//     _maxListeners: undefined,
//     sockets: Map(1) { '-h-FDvXb85Lt0m9OAAAB' => [Circular *1] },
//     _preConnectSockets: Map(0) {},
//     _fns: [],
//     _ids: 0,
//     server: Server {
//       _events: [Object: null prototype] {},
//       _eventsCount: 0,
//       _maxListeners: undefined,
//       _nsps: [Map],
//       parentNsps: Map(0) {},
//       parentNamespacesFromRegExp: Map(0) {},
//       _path: '/socket.io',
//       clientPathRegex: /^\/socket\.io\/socket\.io(\.msgpack|\.esm)?(\.min)?\.js(\.map)?(?:\?|$)/,     
//       _connectTimeout: 45000,
//       _serveClient: true,
//       _parser: [Object],
//       encoder: [Encoder],
//       opts: [Object],
//       _adapter: [class Adapter extends EventEmitter],
//       sockets: [Circular *2],
//       eio: [Server],
//       httpServer: [Server],
//       engine: [Server],
//       [Symbol(shapeMode)]: false,
//       [Symbol(kCapture)]: false
//     },
//     name: '/',
//     adapter: Adapter {
//       _events: [Object: null prototype] {},
//       _eventsCount: 0,
//       _maxListeners: undefined,
//       nsp: [Circular *2],
//       rooms: [Map],
//       sids: [Map],
//       encoder: [Encoder],
//       [Symbol(shapeMode)]: false,
//       [Symbol(kCapture)]: false
//     },
//     [Symbol(shapeMode)]: false,
//     [Symbol(kCapture)]: false
//   },
//   client: Client {
//     sockets: Map(1) { '-h-FDvXb85Lt0m9OAAAB' => [Circular *1] },
//     nsps: Map(1) { '/' => [Circular *1] },
//     server: Server {
//       _events: [Object: null prototype] {},
//       _eventsCount: 0,
//       _maxListeners: undefined,
//       _nsps: [Map],
//       parentNsps: Map(0) {},
//       parentNamespacesFromRegExp: Map(0) {},
//       _path: '/socket.io',
//       clientPathRegex: /^\/socket\.io\/socket\.io(\.msgpack|\.esm)?(\.min)?\.js(\.map)?(?:\?|$)/,     
//       _connectTimeout: 45000,
//       _serveClient: true,
//       _parser: [Object],
//       encoder: [Encoder],
//       opts: [Object],
//       _adapter: [class Adapter extends EventEmitter],
//       sockets: [Namespace],
//       eio: [Server],
//       httpServer: [Server],
//       engine: [Server],
//       [Symbol(shapeMode)]: false,
//       [Symbol(kCapture)]: false
//     },
//     conn: Socket {
//       _events: [Object: null prototype],
//       _eventsCount: 3,
//       _maxListeners: undefined,
//       _readyState: 'open',
//       upgrading: false,
//       upgraded: false,
//       writeBuffer: [Array],
//       packetsFn: [],
//       sentCallbackFn: [],
//       cleanupFn: [Array],
//       id: 'OMOqYYyw3qKWOvpmAAAA',
//       server: [Server],
//       request: [IncomingMessage],
//       protocol: 4,
//       remoteAddress: '::ffff:127.0.0.1',
//       pingTimeoutTimer: null,
//       pingIntervalTimer: Timeout {
//         _idleTimeout: 25000,
//         _idlePrev: [TimersList],
//         _idleNext: [TimersList],
//         _idleStart: 419,
//         _onTimeout: [Function (anonymous)],
//         _timerArgs: undefined,
//         _repeat: null,
//         _destroyed: false,
//         [Symbol(refed)]: true,
//         [Symbol(kHasPrimitive)]: false,
//         [Symbol(asyncId)]: 136,
//         [Symbol(triggerId)]: 0
//       },
//       transport: [Polling],
//       [Symbol(shapeMode)]: false,
//       [Symbol(kCapture)]: false
//     },
//     encoder: Encoder { replacer: undefined },
//     decoder: Decoder { reviver: undefined, _callbacks: [Object] },
//     id: 'OMOqYYyw3qKWOvpmAAAA',
//     onclose: [Function: bound onclose],
//     ondata: [Function: bound ondata],
//     onerror: [Function: bound onerror],
//     ondecoded: [Function: bound ondecoded],
//     connectTimeout: undefined
//   },
//   recovered: false,
//   data: {},
//   connected: true,
//   acks: Map(0) {},
//   fns: [],
//   flags: {},
//   server: <ref *3> Server {
//     _events: [Object: null prototype] {},
//     _eventsCount: 0,
//     _maxListeners: undefined,
//     _nsps: Map(1) { '/' => [Namespace] },
//     parentNsps: Map(0) {},
//     parentNamespacesFromRegExp: Map(0) {},
//     _path: '/socket.io',
//     clientPathRegex: /^\/socket\.io\/socket\.io(\.msgpack|\.esm)?(\.min)?\.js(\.map)?(?:\?|$)/,       
//     _connectTimeout: 45000,
//     _serveClient: true,
//     _parser: {
//       protocol: 5,
//       PacketType: [Object],
//       Encoder: [class Encoder],
//       Decoder: [class Decoder extends Emitter]
//     },
//     encoder: Encoder { replacer: undefined },
//     opts: { cleanupEmptyChildNamespaces: false },
//     _adapter: [class Adapter extends EventEmitter],
//     sockets: <ref *2> Namespace {
//       _events: [Object: null prototype],
//       _eventsCount: 1,
//       _maxListeners: undefined,
//       sockets: [Map],
//       _preConnectSockets: Map(0) {},
//       _fns: [],
//       _ids: 0,
//       server: [Circular *3],
//       name: '/',
//       adapter: [Adapter],
//       [Symbol(shapeMode)]: false,
//       [Symbol(kCapture)]: false
//     },
//     eio: Server {
//       _events: [Object: null prototype],
//       _eventsCount: 1,
//       _maxListeners: undefined,
//       middlewares: [],
//       clients: [Object],
//       clientsCount: 1,
//       opts: [Object],
//       ws: [WebSocketServer],
//       [Symbol(shapeMode)]: false,
//       [Symbol(kCapture)]: false
//     },
//     httpServer: Server {
//       maxHeaderSize: undefined,
//       insecureHTTPParser: undefined,
//       requestTimeout: 300000,
//       headersTimeout: 60000,
//       keepAliveTimeout: 5000,
//       connectionsCheckingInterval: 30000,
//       requireHostHeader: true,
//       joinDuplicateHeaders: undefined,
//       rejectNonStandardBodyWrites: false,
//       _events: [Object: null prototype],
//       _eventsCount: 5,
//       _maxListeners: undefined,
//       _connections: 1,
//       _handle: [TCP],
//       _usingWorkers: false,
//       _workers: [],
//       _unref: false,
//       _listeningId: 2,
//       allowHalfOpen: true,
//       pauseOnConnect: false,
//       noDelay: true,
//       keepAlive: false,
//       keepAliveInitialDelay: 0,
//       highWaterMark: 16384,
//       httpAllowHalfOpen: false,
//       timeout: 0,
//       maxHeadersCount: null,
//       maxRequestsPerSocket: 0,
//       _connectionKey: '6::::3000',
//       [Symbol(IncomingMessage)]: [Function: IncomingMessage],
//       [Symbol(ServerResponse)]: [Function: ServerResponse],
//       [Symbol(shapeMode)]: false,
//       [Symbol(kCapture)]: false,
//       [Symbol(async_id_symbol)]: 119,
//       [Symbol(kUniqueHeaders)]: null,
//       [Symbol(http.server.connections)]: ConnectionsList {},
//       [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
//         _idleTimeout: 30000,
//         _idlePrev: [TimersList],
//         _idleNext: [TimersList],
//         _idleStart: 415,
//         _onTimeout: [Function: bound checkConnections],
//         _timerArgs: undefined,
//         _repeat: 30000,
//         _destroyed: false,
//         [Symbol(refed)]: false,
//         [Symbol(kHasPrimitive)]: false,
//         [Symbol(asyncId)]: 125,
//         [Symbol(triggerId)]: 120
//       }
//     },
//     engine: Server {
//       _events: [Object: null prototype],
//       _eventsCount: 1,
//       _maxListeners: undefined,
//       middlewares: [],
//       clients: [Object],
//       clientsCount: 1,
//       opts: [Object],
//       ws: [WebSocketServer],
//       [Symbol(shapeMode)]: false,
//       [Symbol(kCapture)]: false
//     },
//     [Symbol(shapeMode)]: false,
//     [Symbol(kCapture)]: false
//   },
//   adapter: <ref *4> Adapter {
//     _events: [Object: null prototype] {},
//     _eventsCount: 0,
//     _maxListeners: undefined,
//     nsp: <ref *2> Namespace {
//       _events: [Object: null prototype],
//       _eventsCount: 1,
//       _maxListeners: undefined,
//       sockets: [Map],
//       _preConnectSockets: Map(0) {},
//       _fns: [],
//       _ids: 0,
//       server: [Server],
//       name: '/',
//       adapter: [Circular *4],
//       [Symbol(shapeMode)]: false,
//       [Symbol(kCapture)]: false
//     },
//     rooms: Map(1) { '-h-FDvXb85Lt0m9OAAAB' => [Set] },
//     sids: Map(1) { '-h-FDvXb85Lt0m9OAAAB' => [Set] },
//     encoder: Encoder { replacer: undefined },
//     [Symbol(shapeMode)]: false,
//     [Symbol(kCapture)]: false
//   },
//   id: '-h-FDvXb85Lt0m9OAAAB',
//   handshake: {
//     headers: {
//       host: 'localhost:3000',
//       connection: 'keep-alive',
//       'sec-ch-ua-platform': '"Windows"',
//       'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36',
//       accept: '*/*',
//       'sec-ch-ua': '"Google Chrome";v="129", "Not=A?Brand";v="8", "Chromium";v="129"',
//       'sec-ch-ua-mobile': '?0',
//       'sec-fetch-site': 'same-origin',
//       'sec-fetch-mode': 'cors',
//       'sec-fetch-dest': 'empty',
//       referer: 'http://localhost:3000/index.html',
//       'accept-encoding': 'gzip, deflate, br, zstd',
//       'accept-language': 'ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7',
//       cookie: 'refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6bnVsbCwiaWF0IjoxNzI4ODY2Mjg1LCJleHAiOjE3Mjg5NTI2ODV9.5lfKrHK1t8mGoz6jI5mesMKCUVsx0zWUIRU53GVy3jM'
//     },
//     time: 'Mon Oct 14 2024 09:42:17 GMT+0900 (대한민국 표준시)',
//     address: '::ffff:127.0.0.1',
//     xdomain: false,
//     secure: false,
//     issued: 1728866537649,
//     url: '/socket.io/?clientVersion=1.0.0&EIO=4&transport=polling&t=PA8USU9',
//     query: [Object: null prototype] {
//       clientVersion: '1.0.0',
//       EIO: '4',
//       transport: 'polling',
//       t: 'PA8USU9'
//     },
//     auth: {
//       token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6bnVsbCwiaWF0IjoxNzI4ODY2Mjg1LCJleHAiOjE3Mjg4NjgwODV9.bOVYnhnUuq-LwCdE4DQ5YnszvbRWW8B1MKF6MUSdtmw'
//     }
//   },
//   [Symbol(shapeMode)]: false,
//   [Symbol(kCapture)]: false
// }